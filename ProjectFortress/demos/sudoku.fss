(*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component Sudoku

import * from Set
export Executable

emptySet = EmptySet[\ZZ32\]()

initialSet():TreeSet[\ZZ32\] = do
   init:TreeSet[\ZZ32\] = emptySet
   init := init.add(1)
   init := init.add(2)
   init := init.add(3)
   init := init.add(4)
   init := init.add(5)
   init := init.add(6)
   init := init.add(7)
   init := init.add(8)
   init := init.add(9)
   init
end

singleton(arg:ZZ32):TreeSet[\ZZ32\] = do
   s:TreeSet[\ZZ32\] = emptySet
   s := s.add(arg)
   s
end

(* DANGER: Race condition!  Last write of b[i,j] must actually cas... *)
removeElement(b:TreeSet[\ZZ32\][9,9],i:ZZ32, j:ZZ32, elem:ZZ32):()= do
   s:TreeSet[\ZZ32\] = b[i,j]
   if s.member(elem) then      (* Don't delete the element being removed! *)
      r = s.delete(elem)
      if NOT r.isEmpty() then
         b[i,j] := r
      end
   end
end

propagateRow(b:TreeSet[\ZZ32\][9,9],i:ZZ32, j:ZZ32, elem:ZZ32):() =
   for k <- 0#9 do
      removeElement(b,i,k,elem)
   end


propagateColumn(b:TreeSet[\ZZ32\][9,9],i:ZZ32, j:ZZ32, elem:ZZ32):() =
   for k <- 0#9 do
     removeElement(b,k,j,elem)
   end

propagateSquare(b:TreeSet[\ZZ32\][9,9],i:ZZ32, j:ZZ32, elem:ZZ32):() = do
   starti:ZZ32 = narrow(truncate(i/3)) 3
   startj:ZZ32 = narrow(truncate(j/3)) 3
   for k <-starti#3, l <- startj#3 do
      removeElement(b,k,l,elem)
   end
end

propagateSingleton(board:TreeSet[\ZZ32\][9,9], i:ZZ32, j:ZZ32, elem:ZZ32):()=do
   propagateRow(board, i, j, elem)
   propagateColumn(board, i, j, elem)
   propagateSquare(board, i, j, elem)
end

(* This version involves a barrier between propagation steps. *)
propagate(board:TreeSet[\ZZ32\][9,9]):() = do
   prevUnsolved : ZZ32 := 82
   unsolved : ZZ32 := 81
   while unsolved > 0 AND unsolved < prevUnsolved do
      (* Fixed point iteration.  This will tolerate data race in
         propagateSingleton, though we'd be just as happy without it. *)
      prevUnsolved := unsolved
      unsolved := 0
      for i <- 0#9, j<- 0#9 do
         if board[i,j].size() = 1 then
            elem = board[i,j].minimum()
            propagateSingleton(board, i, j, elem)
         else
            atomic do unsolved += 1 end (* Bug requires do block here *)
         end
      end
      println("**** " unsolved)
   end
end

run(args:String...):()=do
   init:TreeSet[\ZZ32\] = initialSet()
   board:TreeSet[\ZZ32\][9,9] = [singleton(8) init singleton(6) singleton(1) init singleton(9) singleton(3) init singleton(5) ;
                      init singleton(9) init init singleton(8) init singleton(4) init init;
                      init singleton(7) singleton(1) init init init init init singleton(6);
                      init init init singleton(9) singleton(2) init singleton(5) singleton(3) init;
                      init init singleton(9) init singleton(6) init singleton(7) init init;
                      init singleton(3) singleton(4) init singleton(7) singleton(8) init init init;
                      singleton(3) init init init init init singleton(1) singleton(4) init;
                      init init singleton(5) init singleton(1) init init singleton(9) init;
                      singleton(9) init singleton(7) singleton(8) init singleton(4) singleton(6) init singleton(2)]
   println(board.toString())
   println("Starting parallel sudoku solver")
   recordTime(6.847)
   propagate(board)
   printTime(6.847)
   println(board.toString())
end
end
