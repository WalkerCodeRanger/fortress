(*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component PureListQuick
import * from PureList
export Executable

assertStr(a:ZZ32, b:ZZ32, s:String, l: PureList[\ZZ32\]) =
  if a=/=b then
    fail(a "=/=" b ": " s l.toString())
  end

assertStr(a:Boolean, s:String, l: PureList[\ZZ32\]) =
  if NOT a then
    fail("Failed assertion: " s l.toString())
  end

assertStr(a:Boolean, s:String, l: PureList[\ZZ32\], r: PureList[\ZZ32\]) =
  if NOT a then
    fail("Failed assertion: " s l.toString() " and " r.toString())
  end

chkPop(l:PureList[\ZZ32\],fro:ZZ32,sz:ZZ32,by:ZZ32): () = do
  assertStr(sz,l.size()," .size() mismatch in ",l)
  n : ZZ32 := fro
  for e <- seq(l) do
      assertStr(e,n,"Element wrong in ",l)
      n+=by
  end
  assertStr(n, fro + sz by," size mismatch in ",l)
end

chkPop(l:PureList[\ZZ32\],fro:ZZ32,sz:ZZ32): () = chkPop(l,fro,sz,1)

chkPop(l:PureList[\ZZ32\],sz:ZZ32): () = chkPop(l,0,sz,1)

chkExtract(l:PureList[\ZZ32\],sz:ZZ32): () = do
  ll : PureList[\ZZ32\] := l
  for i <- seq(0#sz) do
      (e,ll0) = ll.extractLeft().unJust()
      assertStr(e,i,"extractLeft wrong in ",ll)
      assertStr(ll.left().unJust(),i,"left wrong in ",ll)
      ll := ll0
  end
  assertStr(ll.empty()," not empty after extractLeft(); it's ",ll)
  ll := l
  for i <- seq(1#sz) do
      (ll0,e) = ll.extractRight().unJust()
      assertStr(e,sz-i,"extractRight wrong in ",ll)
      assertStr(ll.right().unJust(),sz-i,"right wrong in ",ll)
      ll := ll0
  end
  assertStr(ll.empty()," not empty after extractRight(); it's ",ll)
end

run(args:String...):() = do
  print("The adventure begins")
  (* The sizes which turned up bugs *)
  testLens : PureList[\ZZ32\] = <|0,1,2,7,10|>
  (* Causes null pointer exception
     println(testLens.generate[\ZZ32\](SumReduction,identity[\ZZ32\])) *)
  for i <- seq(testLens) do
      print("\n" i ":")
      li = list(0#i)
      chkPop(li,i)
      chkExtract(li,i)
      (ll,lr) = li.split()
      lii = ll.append(lr)
      chkPop(lii,i)
      fli = li.filter(fn x => x REM 2 = 0)
      chkPop(fli,0,(i+1) DIV 2,2)
      rli=li.reverse()
      for j <- 0#i do
          print(".")
          assertStr(li[j],j,"indexing wrong for ",li)
          assertStr(rli[i-j-1],j,"reverse indexing wrong for ",rli)
      end
      for j <- 0#(i+1) do
          print(".")
          (l,r) = li.split(j)
          chkPop(l,j)
          chkPop(r,j,i-j)
          (l1,r1) = (li.take(j),li.drop(j))
          chkPop(l1,j)
          chkPop(r1,j,i-j)
          (l2,r2) = (li[0#j],li[j#(i-j)])
          chkPop(l2,j)
          chkPop(r2,j,i-j)
      end
      for j <- testLens do
          print(".")
          lj = list(i#j)
          chkPop(li.append(lj),i+j)
          gz = li.zip[\ZZ32\](lj)
          assert(gz.size(),li.size() MIN lj.size(), "zip size wrong")
          assertStr(gz.generate[\Boolean\](AndReduction,
                                           fn (x,y):Boolean => x+i=y),
                    "zip mismatch ",li,lj)
      end
  end
  println("\nSucceeded")
end

end
