/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress headers.
 */
module Header(Other, Type, Expr, DelimitedExpr, Identifier, Keyword, Symbol,
              Spacing);

import Other;
import Type;
import Expr;
import DelimitedExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* Extends ::= extends w TraitTypes */
List<TraitType> Extends = extends w TraitTypes ;

/* Excludes ::= excludes w TraitTypes */
List<TraitType> Excludes = excludes w TraitTypes ;

/* Comprises ::= comprises w TraitTypes */
List<TraitType> Comprises = comprises w TraitTypes ;

/* AbsComprises ::= comprises w ComprisingTypes */
List<TraitType> AbsComprises = comprises w ComprisingTypes ;

/* TraitTypes ::= TraitType | { w TraitTypeList w } */
List<TraitType> TraitTypes =
     a1:TraitType { yyValue = FortressUtil.mkList(a1); }
   / opencurly w TraitTypeList w closecurly ;

/* TraitTypeList ::= TraitType (w , w TraitType)* */
private List<TraitType> TraitTypeList = a1:TraitType a2s:(w comma w TraitType)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* ComprisingTypes ::= TraitType | { w ComprisingTypeList w } */
private List<TraitType> ComprisingTypes =
     a1:TraitType { yyValue = FortressUtil.mkList(a1); }
   / opencurly w ComprisingTypeList w closecurly ;

/* ComprisingTypeList ::=
     ...
   | TraitType (w , w TraitType)* (w , w ...)?
 */
private List<TraitType> ComprisingTypeList =
     ellipses
     { yyValue = FortressUtil.emptyTraitTypes(); }
   / a1:TraitType a2s:(w comma w TraitType)* (w comma w ellipses)?
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Where ::= where w { w WhereClauseList w } */
List<WhereClause> Where =
      where w opencurly w WhereClauseList w closecurly ;

/* WhereClauseList ::= WhereClause (w , w WhereClause)* */
private List<WhereClause> WhereClauseList =
     a1:WhereClause a2s:(w comma w WhereClause)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* WhereClause ::=
     Id w Extends
   | TypeAlias
   | NatConstraint
   | IntConstraint
   | BoolConstraint
   | UnitConstraint
   | TypeRef w coerces w TypeRef
   | TypeRef w widens w TypeRef
 */
private WhereClause WhereClause =
     a1:Id w a2:Extends
     { yyValue = new WhereExtends(createSpan(yyStart,yyCount), a1, a2); }
   / TypeAlias
   / NatConstraint
   / IntConstraint
   / BoolConstraint
   / UnitConstraint ;
/* ************************************************
 * Not Yet Implemented ***************************
   / a1:TypeRef w coerces w a2:TypeRef
   / a1:TypeRef w widens w a2:TypeRef
************************************************ */

/* NatConstraint ::=
     nat w Id
   | NatRef w <  w NatRef
   | NatRef w <= w NatRef
   | NatRef w >  w NatRef
   | NatRef w >= w NatRef
   | NatRef w =  w NatRef
   | ( w NatConstraint w )
 */
private WhereNat NatConstraint =
     nat w a1:Id
     { yyValue = new WhereNat(createSpan(yyStart,yyCount), a1); }
/* ************************************************
 * Not Yet Implemented ***************************
   / a1:NatRef w "<":op  w a2:NatRef
   / a1:NatRef w "<=":op w a2:NatRef
   / a1:NatRef w ">":op  w a2:NatRef
   / a1:NatRef w ">=":op w a2:NatRef
   / a1:NatRef w equals  w a2:NatRef
************************************************ */
   / openparen w NatConstraint w closeparen ;

/* NatRef ::= StaticArg */
/* ************************************************
 * Not Yet Implemented ***************************
private StaticArg NatRef = StaticArg;
************************************************ */

/* IntConstraint ::=
     int w Id
   | NatRef w <  w NatRef
   | NatRef w <= w NatRef
   | NatRef w >  w NatRef
   | NatRef w >= w NatRef
   | NatRef w =  w NatRef
   | ( w IntConstraint w )
 */
private WhereNat IntConstraint =
     int w a1:Id
     { yyValue = new WhereNat(createSpan(yyStart,yyCount), a1); }
/* ************************************************
 * Not Yet Implemented ***************************
   / a1:NatRef w "<":op  w a2:NatRef
   / a1:NatRef w "<=":op w a2:NatRef
   / a1:NatRef w ">":op  w a2:NatRef
   / a1:NatRef w ">=":op w a2:NatRef
   / a1:NatRef w equals  w a2:NatRef
************************************************ */
   / openparen w IntConstraint w closeparen ;

/* BoolConstraint ::=
     bool w Id
   | NOT w BoolRef
   | BoolRef w OR w BoolRef
   | BoolRef w AND w BoolRef
   | BoolRef w IMPLIES w BoolRef
   | BoolRef w = w BoolRef
   | ( w BoolConstraint w )
 */
private WhereBool BoolConstraint =
     bool w a1:Id
     { yyValue = new WhereBool(createSpan(yyStart,yyCount), a1); }
/* ************************************************
 * Not Yet Implemented ***************************
   / "NOT":op w a1:BoolRef
   / a1:BoolRef w "OR":op w a2:BoolRef
   / a1:BoolRef w "AND":op w a2:BoolRef
   / a1:BoolRef w "IMPLIES":op w a2:BoolRef
   / a1:BoolRef w equals w a2:BoolRef
************************************************ */
   / openparen w BoolConstraint w closeparen ;

/* BoolRef ::= StaticArg */
/* ************************************************
 * Not Yet Implemented ***************************
private StaticArg BoolRef = StaticArg;
************************************************ */

/* UnitConstraint ::=
     unit w Id
   | UnitRef w = w UnitRef
 */
private WhereUnit UnitConstraint =
     unit w a1:Id
     { yyValue = new WhereUnit(createSpan(yyStart,yyCount), a1); } ;
/* ************************************************
 * Not Yet Implemented ***************************
   / a1:UnitRef w equals w a2:UnitRef
************************************************ */

/* FnHeaderClause ::= (w IsType)? FnClauses */
FnHeaderClause FnHeaderClause = a1:(w IsType)? a2:FnClauses
     { Option<TypeRef> returnType;
       if (a1 == null) returnType = None.<TypeRef>make();
       else            returnType = Some.<TypeRef>make(a1);
       yyValue = new FnHeaderClause(a2.getThrowsClause(), a2.getWhereClause(),
                                    a2.getContractClause(), returnType);
     };

/* FnClauses ::= (w Throws)? (w Where)? Contract */
FnHeaderClause FnClauses = a1:(w Throws)? a2:(w Where)? a3:Contract
     { Option<List<TraitType>>   throwsClause;
       Option<List<WhereClause>> whereClause;
       Option<Contract>          contractClause;
       if (a1 == null) throwsClause   = None.<List<TraitType>>make();
       else            throwsClause   = Some.<TraitType>makeSomeListOrNone(a1);
       if (a2 == null) whereClause    = None.<List<WhereClause>>make();
       else            whereClause    = Some.<WhereClause>makeSomeListOrNone(a2);
       if (a3 == null) contractClause = None.<Contract>make();
       else            contractClause = Some.<Contract>make(a3);
       yyValue = new FnHeaderClause(throwsClause, whereClause, contractClause,
                                    None.<TypeRef>make());
     };

/* Throws ::= throws w MayTraitTypes */
List<TraitType> Throws = throws w MayTraitTypes ;

/* MayTraitTypes ::= { w } | TraitTypes  */
private List<TraitType> MayTraitTypes =
     opencurly w closecurly { yyValue = FortressUtil.emptyTraitTypes(); }
   / TraitTypes ;

/* Contract ::= (w Requires)? (w Ensures)? (w Invariant)? */
Contract Contract =
     a1:(w Requires)? a2:(w Ensures)? a3:(w Invariant)?
     { if (a1 == null) a1 = FortressUtil.emptyExprs();
       if (a2 == null) a2 = FortressUtil.emptyEnsuresClauses();
       if (a3 == null) a3 = FortressUtil.emptyExprs();
       if (a1 == null && a2 == null && a3 == null) yyValue = null;
       else yyValue = new Contract(createSpan(yyStart,yyCount), a1, a2, a3);
     };

/* Requires ::= requires w { (w ExprList)? w } */
private List<Expr> Requires = requires w opencurly a1:(w ExprList)? w closecurly
     { if (a1 == null) yyValue = FortressUtil.emptyExprs();
       else            yyValue = a1;
     };

/* Ensures  ::= ensures w { (w EnsuresClauseList)? w } */
private List<EnsuresClause> Ensures =
     ensures w opencurly a1:(w EnsuresClauseList)? w closecurly
     { if (a1 == null) yyValue = FortressUtil.emptyEnsuresClauses();
       else            yyValue = a1;
     };

/* EnsuresClauseList ::= EnsuresClause (w , w EnsuresClause)* */
private List<EnsuresClause> EnsuresClauseList =
     a1:EnsuresClause a2s:(w comma w EnsuresClause)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* EnsuresClause ::= Expr (w provided w Expr)? */
private EnsuresClause EnsuresClause = a1:Expr a2:(w provided w Expr)?
     { Option<Expr> ensures;
       if (a2 == null) ensures = None.<Expr>make();
       else            ensures = Some.<Expr>make(a2);
       yyValue = new EnsuresClause(createSpan(yyStart,yyCount), a1, ensures);
     };

/* Invariant::= invariant w { (w ExprList)? w } */
private List<Expr> Invariant =
     invariant w opencurly a1:(w ExprList)? w closecurly
     { if (a1 == null) yyValue = FortressUtil.emptyExprs();
       else            yyValue = a1;
     };

/* CoercionClauses ::= (w CoercionWhere)? w CoercionContract */
FnHeaderClause CoercionClauses = a1:(w CoercionWhere)? w a2:CoercionContract
     { Option<List<WhereClause>> whereClause;
       Option<Contract>          contractClause;
       if (a1 == null) whereClause    = None.<List<WhereClause>>make();
       else            whereClause    = Some.<WhereClause>makeSomeListOrNone(a1);
       if (a2 == null) contractClause = None.<Contract>make();
       else            contractClause = Some.<Contract>make(a2);
       yyValue = new FnHeaderClause(None.<List<TraitType>>make(), whereClause,
                                    contractClause, None.<TypeRef>make());
     };

/* CoercionWhere ::= where w { w CoercionWhereClauseList w } */
private List<WhereClause> CoercionWhere =
     where w opencurly w CoercionWhereClauseList w closecurly ;

/* CoercionWhereClauseList ::= CoercionWhereClause (w , w CoercionWhereClause)*
 */
private List<WhereClause> CoercionWhereClauseList =
     a1:CoercionWhereClause a2s:(w comma w CoercionWhereClause)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* CoercionWhereClause ::=
     WhereClause
   | TypeRef w widens w or w coerces w TypeRef
*/
private WhereClause CoercionWhereClause =
     WhereClause
   / a1:TypeRef w widens w or w coerces w a2:TypeRef
     { yyValue = new WhereWidensCoerces(createSpan(yyStart,yyCount), a1, a2); };

/* CoercionContract ::= (w Ensures)? (w Invariant)? */
Contract CoercionContract = a1:(w Ensures)? a2:(w Invariant)?
     { if (a1 == null) a1 = FortressUtil.emptyEnsuresClauses();
       if (a2 == null) a2 = FortressUtil.emptyExprs();
       if (a1 == null && a2 == null) yyValue = null;
       else yyValue = new Contract(createSpan(yyStart,yyCount),
                                   FortressUtil.emptyExprs(), a1, a2);
     };

/* Each modifier cannot appear more than once. */
/* TraitMods ::= (TraitMod w)+ */
List<Modifier> TraitMods = a1s:(TraitMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* TraitMod ::= AbsTraitMod | private */
private Modifier TraitMod =
     AbsTraitMod
   / private { yyValue = new ModifierPrivate(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* AbsTraitMods ::= (AbsTraitMod w)+ */
List<Modifier> AbsTraitMods = a1s:(AbsTraitMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* AbsTraitMod ::= value | test */
private Modifier AbsTraitMod =
     value { yyValue = new ModifierValue(createSpan(yyStart,yyCount)); }
   / test  { yyValue = new ModifierTest(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* ObjectMods ::= TraitMods */
List<Modifier> ObjectMods = TraitMods ;

/* Each modifier cannot appear more than once. */
/* AbsObjectMods ::= AbsTraitMods */
List<Modifier> AbsObjectMods = AbsTraitMods ;

/* Each modifier cannot appear more than once. */
/* MdMods ::= (MdMod w)+ */
List<Modifier> MdMods = a1s:(MdMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* MdMod ::= FnMod | override */
private Modifier MdMod =
     FnMod
   / override { yyValue = new ModifierOverride(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* AbsMdMods ::= (AbsMdMod w)+ */
List<Modifier> AbsMdMods = a1s:(AbsMdMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* AbsMdMod ::= AbsMdMod | override */
private Modifier AbsMdMod =
     AbsFnMod
   / override { yyValue = new ModifierOverride(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* FnMods ::= (FnMod w)+ */
List<Modifier> FnMods = a1s:(FnMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* FnMod ::= AbsFnMod | private */
private Modifier FnMod =
     AbsFnMod
   / private { yyValue = new ModifierPrivate(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* AbsFnMods ::= (AbsFnMod w)+ */
List<Modifier> AbsFnMods = a1s:(AbsFnMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* AbsFnMod ::= LocalFnMod | test */
private Modifier AbsFnMod =
     LocalFnMod
   / test { yyValue = new ModifierTest(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* LocalFnMods ::= (LocalFnMod w)+ */
List<Modifier> LocalFnMods = a1s:(LocalFnMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* LocalFnMod ::= atomic | io */
private Modifier LocalFnMod =
     atomic { yyValue = new ModifierAtomic(createSpan(yyStart,yyCount)); }
   / io     { yyValue = new ModifierIO(createSpan(yyStart,yyCount)); } ;

/* Each modifier cannot appear more than once. */
/* ParamFldMods ::= (ParamFldMod w)+ */
List<Modifier> ParamFldMods = a1s:(ParamFldMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* ParamFldMod ::= var | hidden | settable | wrapped */
private Modifier ParamFldMod =
     var      { yyValue = new ModifierVar(createSpan(yyStart,yyCount)); }
   / hidden   { yyValue = new ModifierHidden(createSpan(yyStart,yyCount)); }
   / settable { yyValue = new ModifierSettable(createSpan(yyStart,yyCount)); }
   / wrapped  { yyValue = new ModifierWrapped(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* FldMods ::= (FldMod w)+ */
List<Modifier> FldMods = a1s:(FldMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* FldMod ::= var | AbsFldMod */
private Modifier FldMod =
     var { yyValue = new ModifierVar(createSpan(yyStart,yyCount)); }
   / AbsFldMod ;

/* Each modifier cannot appear more than once. */
/* AbsFldMods ::= (AbsFldMod w)+ */
List<Modifier> AbsFldMods = a1s:(AbsFldMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* AbsFldMod ::= ApiFldMod | wrapped | private */
private Modifier AbsFldMod =
     ApiFldMod
   / wrapped { yyValue = new ModifierWrapped(createSpan(yyStart,yyCount)); }
   / private { yyValue = new ModifierPrivate(createSpan(yyStart,yyCount)); };

/* Each modifier cannot appear more than once. */
/* ApiFldMods ::= (ApiFldMod w)+ */
List<Modifier> ApiFldMods = a1s:(ApiFldMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* ApiFldMod ::= hidden | settable | test */
private Modifier ApiFldMod =
     hidden   { yyValue = new ModifierHidden(createSpan(yyStart,yyCount)); }
   / settable { yyValue = new ModifierSettable(createSpan(yyStart,yyCount)); }
   / test     { yyValue = new ModifierTest(createSpan(yyStart,yyCount)); };

/* StaticParams ::= [\ w StaticParamList w \] */
List<StaticParam> StaticParams =
     opendoublesquare w StaticParamList w closedoublesquare ;

/* StaticParamList ::= StaticParam (w , w StaticParam)* */
private List<StaticParam> StaticParamList =
     a1:StaticParam a2s:(w comma w StaticParam)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* StaticParam ::=
     Id (w Extends)? (w absorbs w unit)?
   | nat w Id
   | int w Id
   | bool w Id
   | dim w Id
   | unit w Id (w : w DimRef)? (w absorbs w unit)?
   | opr w Op
*/
private StaticParam StaticParam =
     a1:Id a2:(w Extends)? a3:(w absorbs w unit)?
     { if (a2 == null) a2 = Collections.<TraitType>emptyList();
       boolean absorbs;
       if (a3 == null) absorbs = false;
       else            absorbs = true;
       yyValue = new SimpleTypeParam(createSpan(yyStart,yyCount),a1,a2,absorbs);
     }
   / nat  w a1:Id { yyValue = new NatParam(createSpan(yyStart,yyCount), a1); }
   / int  w a1:Id { yyValue = new IntParam(createSpan(yyStart,yyCount), a1); }
   / bool w a1:Id { yyValue = new BoolParam(createSpan(yyStart,yyCount), a1); }
   / dim  w a1:Id {yyValue = new DimensionParam(createSpan(yyStart,yyCount),a1);}
/* ************************************************
 * Not Yet Implemented ***************************
   / unit w a1:Id a2:(w colon w DimRef)? a3:(w absorbs w unit)?
************************************************ */
   / opr  w a1:Op {yyValue = new OperatorParam(createSpan(yyStart,yyCount),a1);};
