/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress trait and object declarations.
 */
module TraitObject(Method, Field, AbsField, Param, Other, Header, Identifier,
                   Keyword, Spacing);

import Method;
import Field;
import AbsField;
modify Param;
import Other;
import Header;
import Identifier;
import Keyword;
import Spacing;

/* TraitDecl ::= TraitHeader [w GoInATrait] w end  */
TraitDecl TraitDecl = a1:TraitHeader a2:(w GoInATrait)? w end
     { if (a2 == null) a2 = Collections.<DefOrDecl>emptyList();
       yyValue =
        new TraitDecl(createSpan(yyStart,yyCount), a1.getMods(), a1.getName(),
                      Some.<StaticParam>makeSomeListOrNone(a1.getStaticParams()),
                      Some.<TypeRef>makeSomeListOrNone(a1.getExtendsClause()),
                      a1.getExcludesClause(), a1.getComprisesClause(),
                      FortressUtil.getListVal(a1.getWhereClause()), a2);
     };

/* TraitHeader ::=
     [TraitMods] trait w Id [w StaticParams] [w Extends] TraitClauses
 */
private TraitHeader TraitHeader =
     a1:TraitMods? trait w a2:Id a3:(w StaticParams)? a4:(w Extends)?
     a5:TraitClauses
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       if (a3 == null) a3 = FortressUtil.emptyStaticParams();
       if (a4 == null) a4 = FortressUtil.emptyTypeRefs();
       yyValue = new TraitHeader(a1, a2, a3, a4, a5.getExcludes(),
                                 a5.getComprises(), a5.getWhere());
     };

/* Each trait clause cannot appear more than once. */
/* TraitClauses ::= (w TraitClause)* */
private TraitClauses TraitClauses = a1s:(w TraitClause)*
     { yyValue = new TraitClauses();
       for (TraitClause t : (List<TraitClause>)a1s.list()) {
         yyValue.set(t);
       }
     };

/* TraitClause ::=
     Excludes
   | Comprises
   | Where
 */
private TraitClause TraitClause =
     a1:Excludes
     { yyValue = new Excludes(createSpan(yyStart,yyCount), a1); }
   / a1:Comprises
     { yyValue = new Comprises(createSpan(yyStart,yyCount), a1); }
   / a1:Where
     { yyValue = new Where(createSpan(yyStart,yyCount), a1); };

/* GoInATrait ::=
     [Coercions br] GoFrontInATrait [br GoBackInATrait]
   | [Coercions br] GoBackInATrait
 */
private List<DefOrDecl> GoInATrait =
     a1:(Coercions br)? a2:GoFrontInATrait a3:(br GoBackInATrait)?
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
       if (a3 != null) yyValue.addAll(a3);
     }
   / a1:(Coercions br)? a2:GoBackInATrait
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
     };

/* Coercions ::= Coercion (br Coercion)* */
private List<DefOrDecl> Coercions = a1:Coercion a2s:(br Coercion)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* GoFrontInATrait ::= GoesFrontInATrait (br GoesFrontInATrait)* */
private List<DefOrDecl> GoFrontInATrait =
     a1:GoesFrontInATrait a2s:(br GoesFrontInATrait)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* GoesFrontInATrait ::= AbsFldDecl | GetterSetterDecl | PropertyDecl */
private DefOrDecl GoesFrontInATrait =
     AbsFldDecl
   / GetterSetterDecl
   / PropertyDecl ;

/* GoBackInATrait ::= GoesBackInATrait (br GoesBackInATrait)* */
private List<DefOrDecl> GoBackInATrait =
     a1:GoesBackInATrait a2s:(br GoesBackInATrait)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* GoesBackInATrait ::= MdDecl | PropertyDecl */
private DefOrDecl GoesBackInATrait =
     MdDecl
   / PropertyDecl ;

/* ObjectDecl ::= ObjectHeader [w GoInAnObject] w end */
ObjectDecl ObjectDecl = a1:ObjectHeader a2:(w GoInAnObject)? w end
     { if (a2 == null) a2 = Collections.<DefOrDecl>emptyList();
       Contract contract;
       FnHeaderClause fhc = a1.getFnHeaderClause();
       Option<Contract> o = fhc.getContractClause();
       if (o.isPresent()) contract = (Contract)o.getVal();
       else               contract = FortressUtil.emptyContract();
       yyValue = new ObjectDecl
           (createSpan(yyStart,yyCount), a1.getMods(), a1.getName(),
            Some.<StaticParam>makeSomeListOrNone(a1.getStaticParams()),
            a1.getParams(),
            Some.<TypeRef>makeSomeListOrNone(a1.getExtendsClause()),
            FortressUtil.getListVal(fhc.getThrowsClause()),
            FortressUtil.getListVal(fhc.getWhereClause()), contract, a2);
     };

/* ObjectHeader ::=
     [ObjectMods] object w Id [w StaticParams] [w ObjectValParam] [w Extends]
     FnClauses
 */
private ObjectHeader ObjectHeader =
     a1:ObjectMods? object w a2:Id a3:(w StaticParams)?
     a4:(w ObjectValParam)? a5:(w Extends)? a6:FnClauses
     { Option<List<Param>> params;
       if (a1 == null) a1 = FortressUtil.emptyModifiers();
       if (a3 == null) a3 = FortressUtil.emptyStaticParams();
       if (a4 == null) params = None.<List<Param>>make();
       else            params = Some.<List<Param>>make(a4);
       if (a5 == null) a5 = FortressUtil.emptyTypeRefs();
       yyValue = new ObjectHeader(a1, a2, a3, params, a5, a6);
     };

/* ObjectValParam ::= ( [w ObjectParams] w ) */
private List<Param> ObjectValParam = openparen a1:(w Params)? w closeparen
     { if (a1 == null) yyValue = FortressUtil.emptyParams();
       else yyValue = a1;
     };

/* ObjectParams  ::=
     (ObjectParam w , w)* [ObjectVarargs w , w] ObjectKeyword (w , w ObjectKeyword)*
   | (ObjectParam w , w)*  ObjectVarargs
   |  ObjectParam (w , w ObjectParam)*
   ObjectVarargs ::= transient w Varargs
   ObjectKeyword ::= ObjectParam w = w Expr
   ObjectParam   ::= [FldMods] Param
                 |   transient w Param
 */
Param Varargs := transient w a1:VarargsParam
     { List<Modifier> mods = new ArrayList<Modifier>(1);
       mods.add(new Modifier.Transient(createSpan(yyStart,9)));
       Option<TypeRef> ty_opt = a1.getType();
       if (ty_opt.isPresent())
           yyValue = new Param(createSpan(yyStart,yyCount),
                               mods, a1.getName(), (TypeRef)ty_opt.getVal());
       else
           yyValue = new Param(createSpan(yyStart,yyCount), mods, a1.getName());
     };

Param Param :=
     a1:FldMods? a2:PlainParam
     { if (a1 == null) a1 = Collections.<Modifier>emptyList();
       Option<TypeRef> ty_opt = a2.getType();
       if (ty_opt.isPresent())
           yyValue = new Param(createSpan(yyStart,yyCount), a1, a2.getName(),
                               (TypeRef)ty_opt.getVal());
       else
           yyValue = new Param(createSpan(yyStart,yyCount), a1, a2.getName());
     }
   / a1:transient w a2:PlainParam
     { List<Modifier> mods = new ArrayList<Modifier>(1);
       mods.add(new Modifier.Transient(createSpan(yyStart,9)));
       Option<TypeRef> ty_opt = a2.getType();
       if (ty_opt.isPresent())
           yyValue = new Param(createSpan(yyStart,yyCount),
                               mods, a2.getName(), (TypeRef)ty_opt.getVal());
       else
           yyValue = new Param(createSpan(yyStart,yyCount), mods, a2.getName());
     };

/* GoInAnObject ::=
     [Coercions br] GoFrontInAnObject [br GoBackInAnObject]
   | [Coercions br] GoBackInAnObject
 */
List<DefOrDecl> GoInAnObject =
     a1:(Coercions br)? a2:GoFrontInAnObject a3:(br GoBackInAnObject)?
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
       if (a3 != null) yyValue.addAll(a3);
     }
   / a1:(Coercions br)? a2:GoBackInAnObject
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
     };

/* GoFrontInAnObject ::= GoesFrontInAnObject (br GoesFrontInAnObject)* */
private List<DefOrDecl> GoFrontInAnObject =
     a1:GoesFrontInAnObject a2s:(br GoesFrontInAnObject)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* GoesFrontInAnObject ::= FldDecl | GetterSetterDef | PropertyDecl */
private DefOrDecl GoesFrontInAnObject =
     FldDecl
   / GetterSetterDef
   / PropertyDecl ;

/* GoBackInAnObject ::= GoesBackInAnObject (br GoesBackInAnObject)* */
private List<DefOrDecl> GoBackInAnObject =
     a1:GoesBackInAnObject a2s:(br GoesBackInAnObject)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* GoesBackInAnObject ::= MdDef | PropertyDecl */
private DefOrDecl GoesBackInAnObject =
     MdDef
   / PropertyDecl ;

/* AbsTraitDecl  ::= TraitHeader [w AbsGoInATrait] w end */
AbsTraitDecl AbsTraitDecl = a1:TraitHeader a2:(w AbsGoInATrait)? w end
     { if (a2 == null) a2 = Collections.<DefOrDecl>emptyList();
       yyValue = new AbsTraitDecl
           (createSpan(yyStart,yyCount), a1.getMods(), a1.getName(),
            Some.<StaticParam>makeSomeListOrNone(a1.getStaticParams()),
            Some.<TypeRef>makeSomeListOrNone(a1.getExtendsClause()),
            a1.getExcludesClause(), a1.getComprisesClause(),
            FortressUtil.getListVal(a1.getWhereClause()), a2);
     };

/* AbsGoInATrait ::=
     [AbsCoercions br] AbsGoFrontInATrait [br AbsGoBackInATrait]
   | [AbsCoercions br] AbsGoBackInATrait
 */
private List<DefOrDecl> AbsGoInATrait =
     a1:(AbsCoercions br)? a2:AbsGoFrontInATrait a3:(br AbsGoBackInATrait)?
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
       if (a3 != null) yyValue.addAll(a3);
     }
   / a1:(AbsCoercions br)? a2:AbsGoBackInATrait
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
     };

/* AbsCoercions ::= AbsCoercion (br AbsCoercion)* */
private List<DefOrDecl> AbsCoercions = a1:AbsCoercion a2s:(br AbsCoercion)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* AbsGoFrontInATrait ::= AbsGoesFrontInATrait (br AbsGoesFrontInATrait)* */
private List<DefOrDecl> AbsGoFrontInATrait =
     a1:AbsGoesFrontInATrait a2s:(br AbsGoesFrontInATrait)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* AbsGoesFrontInATrait ::= ApiFldDecl | AbsGetterSetterDecl | PropertyDecl */
private DefOrDecl AbsGoesFrontInATrait =
     ApiFldDecl
   / AbsGetterSetterDecl
   / PropertyDecl ;

/* AbsGoBackInATrait ::= AbsGoesBackInATrait (br AbsGoesBackInATrait)* */
private List<DefOrDecl> AbsGoBackInATrait =
     a1:AbsGoesBackInATrait a2s:(br AbsGoesBackInATrait)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* AbsGoesBackInATrait ::= AbsMdDecl | PropertyDecl */
private DefOrDecl AbsGoesBackInATrait =
     AbsMdDecl
   / PropertyDecl ;

/* AbsObjectDecl ::= ObjectHeader [w AbsGoInAnObject] w end */
AbsObjectDecl AbsObjectDecl = a1:ObjectHeader a2:(w AbsGoInAnObject)? w a3:end
     { if (a2 == null) a2 = Collections.<DefOrDecl>emptyList();
       Contract contract;
       FnHeaderClause fhc = a1.getFnHeaderClause();
       Option<Contract> o = fhc.getContractClause();
       if (o.isPresent()) contract = (Contract)o.getVal();
       else               contract = FortressUtil.emptyContract();
       yyValue = new AbsObjectDecl
           (createSpan(yyStart,yyCount), a1.getMods(), a1.getName(),
            Some.<StaticParam>makeSomeListOrNone(a1.getStaticParams()),
            a1.getParams(),
            Some.<TypeRef>makeSomeListOrNone(a1.getExtendsClause()),
            FortressUtil.getListVal(fhc.getThrowsClause()),
            FortressUtil.getListVal(fhc.getWhereClause()), contract, a2);
     };

/* AbsGoInAnObject ::=
     [AbsCoercions br] AbsGoFrontInAnObject [br AbsGoBackInAnObject]
   | [AbsCoercions br] AbsGoBackInAnObject
 */
List<DefOrDecl> AbsGoInAnObject =
     a1:(AbsCoercions br)? a2:AbsGoFrontInAnObject a3:(br AbsGoBackInAnObject)?
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
       if (a3 != null) yyValue.addAll(a3);
     }
   / a1:(AbsCoercions br)? a2:AbsGoBackInAnObject
     { yyValue = new ArrayList<DefOrDecl>();
       if (a1 != null) yyValue.addAll(a1);
       yyValue.addAll(a2);
     };

/* AbsGoFrontInAnObject ::= AbsGoesFrontInAnObject (br AbsGoesFrontInAnObject)* */
private List<DefOrDecl> AbsGoFrontInAnObject =
     a1:AbsGoesFrontInAnObject a2s:(br AbsGoesFrontInAnObject)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* AbsGoesFrontInAnObject ::= ApiFldDecl | AbsGetterSetterDecl | PropertyDecl */
private DefOrDecl AbsGoesFrontInAnObject =
     ApiFldDecl
   / AbsGetterSetterDecl
   / PropertyDecl ;

/* AbsGoBackInAnObject ::= AbsGoesBackInAnObject (br AbsGoesBackInAnObject)* */
private List<DefOrDecl> AbsGoBackInAnObject =
     a1:AbsGoesBackInAnObject a2s:(br AbsGoesBackInAnObject)*
     { yyValue = new ArrayList<DefOrDecl>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/* AbsGoesBackInAnObject ::= AbsMdDecl | PropertyDecl */
private DefOrDecl AbsGoesBackInAnObject =
     AbsMdDecl
   / PropertyDecl ;
