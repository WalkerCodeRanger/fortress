/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress function declarations.
 */
module Function(Param, Header, Type, NoNewlineExpr, Identifier, Keyword, Symbol,
                Spacing);

import Param;
import Header;
import Type;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* FnDecl ::= FnDef | AbsFnDecl */
Decl FnDecl =
     FnDef
   / AbsFnDecl ;

/* FnDef ::= [FnMods] FnHeaderFront FnHeaderClause w = w NoNewlineExpr */
FnDecl FnDef =
     a1:FnMods? a2:FnHeaderFront a3:FnHeaderClause w equals w a4:NoNewlineExpr
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       List<TypeRef>    throws_ = FortressUtil.getListVal(a3.getThrowsClause());
       List<WhereClause> where_ = FortressUtil.getListVal(a3.getWhereClause());
       Contract contract;
       if (a3.getContractClause().isPresent())
           contract = (Contract)a3.getContractClause().getVal();
       else
           contract = FortressUtil.emptyContract();
       yyValue =
         new FnDecl(createSpan(yyStart,yyCount),a1,None.<Id>make(),a2.getName(),
                    Some.<StaticParam>makeSomeListOrNone(a2.getStaticParams()),
                    a2.getParams(), a3.getReturnType(), throws_, where_,
                    contract, a4);
     };

/* AbsFnDecl ::=
     [FnMods] FnHeaderFront FnHeaderClause
   | Name w : w ArrowType
 */
AbsFnDecl AbsFnDecl =
     a1:FnMods? a2:FnHeaderFront a3:FnHeaderClause
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       List<TypeRef>    throws_ = FortressUtil.getListVal(a3.getThrowsClause());
       List<WhereClause> where_ = FortressUtil.getListVal(a3.getWhereClause());
       Contract contract;
       if (a3.getContractClause().isPresent())
           contract = (Contract)a3.getContractClause().getVal();
       else
           contract = FortressUtil.emptyContract();
       yyValue =
       new AbsFnDecl(createSpan(yyStart,yyCount), a1, None.<Id>make(),
                     a2.getName(),
                     Some.<StaticParam>makeSomeListOrNone(a2.getStaticParams()),
                     a2.getParams(), a3.getReturnType(), throws_, where_,
                     contract);
     }
   / a1:Name w colon w a2:ArrowType
     { List<Modifier> mods = FortressUtil.emptyModifiers();
       List<Param> params = FortressUtil.emptyParams();
       for (TypeRef i : a2.getDomain()) {
           params.add(new Param(i.getSpan(), mods, new Id(i.getSpan(), "_"), i));
       }
       yyValue = new AbsFnDecl(createSpan(yyStart,yyCount), mods,
                               None.<Id>make(), (FnName)a1,
                               Some.<StaticParam>makeSomeListOrNone
                                   (FortressUtil.emptyStaticParams()),
                               params, Some.<TypeRef>make(a2.getRange()),
                               FortressUtil.emptyTypeRefs(),
                               FortressUtil.emptyWhereClauses(),
                               FortressUtil.emptyContract());
     };

/* FnHeaderFront ::=
     Id [w StaticParams] w ValParam
   | OpHeaderFront
 */
FnHeaderFront FnHeaderFront =
     a1:Id a2:(w StaticParams)? w a3:ValParam
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new FnHeaderFront(new Fun(createSpan(yyStart,yyCount), a1),
                                   a2, a3);
     }
   / OpHeaderFront ;
